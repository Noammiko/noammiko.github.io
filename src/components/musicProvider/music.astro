---
import { getSongData } from "@/lib/songlink";
import { getEntity, getMusicProviders, getYoutubeEmbedId } from "./music";
import type { Platform, ResponseContent } from "./types";
import { YouTube } from "astro-embed";

import { Card, CardContent, CardFooter } from "@/components/ui/card";

import MainButton from "./musicMainButton.svelte";
import ProviderButtons from "./musicButtons.svelte";

interface Props {
  songlink?: string;
  id?: string;
  type?: "song" | "album";
  platform?: Platform;
  data?: ResponseContent;
  songIfSingle?: boolean;
  webOnly?: boolean;
}

const {
  songlink,
  id,
  type = "song",
  platform,
  data,
  songIfSingle = false,
  webOnly = false,
} = Astro.props;

let res: ResponseContent;
if (!songlink && !id && !data) {
  throw new Error("Must provide either songlink, id");
} else if (data) {
  res = data;
} else if (songlink) {
  res = await getSongData({
    url: songlink,
    userCountry: "CA",
    songIfSingle,
  });
} else {
  if (!(id && type && platform)) {
    throw new Error("Must provide id, type and platform");
  }
  res = await getSongData({
    userCountry: "CA",
    id,
    type,
    platform,
    songIfSingle,
  });
}

if (!res) {
  throw new Error("No response");
}

const song = getEntity(res);
const items = getMusicProviders(res);
const youtubeId = getYoutubeEmbedId(res); // TODO: improve album representation
---

<Card
  className="overflow-hidden relative bg-black/30 backdrop-blur-sm rounded-lg group border border-red-500/30 hover:border-red-500/50 transition"
>
  <CardContent className="p-0">
    <div class="flex md:flex-row flex-col">
      {/* Album art and song info for mobile */}
      <div class="flex flex-col md:hidden p-4">
        <div class="flex items-center gap-4">
          <img
            src={song.thumbnailUrl || "/albumPlaceholder.svg"}
            alt={`${song.title} by ${song.artistName}`}
            width={80}
            height={80}
            class="rounded-md object-cover"
          />
          <div class="text-start">
            <h3 class="font-semibold text-lg">{song.title}</h3>
            <p class="text-gray-200">{song.artistName}</p>
          </div>
        </div>
      </div>

      {/* YouTube embed for desktop */}
      {
        youtubeId && (
          <div class="hidden md:block aspect-square w-full h-full min-h-[300px] max-w-[480px]">
            <YouTube
              id={youtubeId}
              class="w-full h-full"
              params="?fs=0&modestbranding=1&playsinline=1&color=white"
              poster={song.thumbnailUrl}
            />
          </div>
        )
      }

      {/* Song info and streaming links for desktop */}
      <div class="p-4 sm:p-6 flex flex-col justify-between w-full">
        <div class="hidden md:flex items-start gap-4 mb-6">
          {
            song.type === "album" && (
              <img
                src={song.thumbnailUrl || "/albumPlaceholder.svg"}
                alt={`${song.title} by ${song.artistName}`}
                width={100}
                height={100}
                class="rounded-md object-cover flex-shrink-0"
              />
            )
          }
          <div class="text-start">
            <h2 class="text-2xl font-bold">{song.title}</h2>
            <p class="text-xl text-gray-200">{song.artistName}</p>
          </div>
        </div>

        <div class="grid gap-8">
          <MainButton client:load="svelte" items={items} webOnly={webOnly} />
          <ProviderButtons
            client:idle="svelte"
            items={items}
            webOnly={webOnly}
          />
        </div>
      </div>
    </div>
  </CardContent>
  <CardFooter
    className="px-6 py-3 border-t text-xs text-gray-200 border-red-500/30 group-hover:border-red-500/50 transition justify-end"
  >
    <a
      href={res.pageUrl ?? "https://odesli.co/"}
      target="_blank"
      rel="noopener noreferrer"
      class="flex items-center hover:underline"
    >
      <span>Powered by <b>Songlink / Odesli</b></span>
    </a>
  </CardFooter>
</Card>
