/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch matching links for a given streaming entity.
         * @description This is the main endpoint that allows you to fetch the matching links for a given streaming entity.
         *     For example, with this endpoint you can provide the URL of an Apple Music track and receive the URLs and data for that song on Spotify, YouTube, Tidal and more.
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description The URL of a valid song or album from any of our supported platforms. It is safest to encode the URL, e.g. with `encodeURIComponent()` */
                    url?: string;
                    /** @description Two-letter country code. Specifies the country/location we use when searching streaming catalogs. Optional. Defaults to `US`. */
                    userCountry?: string;
                    /** @description Defaults to `false`. Pass in `true` if you’d like us to use/return song data for single-song albums (i.e. “singles”). We often do better matching if we use the song instead of the album/single, so this is highly recommend. */
                    songIfSingle?: boolean;
                    /** @description The platform of the entity you'd like to match. See above section for supported platforms. If `url` is not provided, you must provide `platform`, `type` and `id`. */
                    platform?: "spotify" | "itunes" | "appleMusic" | "youtube" | "youtubeMusic" | "google" | "googleStore" | "pandora" | "deezer" | "tidal" | "amazonStore" | "amazonMusic" | "soundcloud" | "napster" | "yandex" | "spinrilla" | "audius" | "anghami" | "boomplay" | "audiomack";
                    /** @description The type of streaming entity. We support `song` and `album`. If `url` is not provided, you must provide `platform`, `type` and `id`. */
                    type?: "song" | "album";
                    /** @description The unique identifier of the streaming entity, e.g. `1443109064` which is an iTunes ID. If `url` is not provided, you must provide `platform`, `type` and `id`. */
                    id?: string;
                    /** @description API Key for higher rate limits and preferred support. */
                    key?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A successful response with matching links and entity data. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Response"];
                    };
                };
                /** @description Client-side error. */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
                /** @description Server-side error. */
                "5XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Response: {
            /** @description The unique ID for the input entity that was supplied in the request. */
            entityUniqueId?: string;
            /** @description The userCountry query param that was supplied in the request. */
            userCountry?: string;
            /** @description A URL that will render the Songlink page for this entity. */
            pageUrl?: string;
            /** @description A collection of objects. Each key is a platform, and each value is an object that contains data for linking to the match. */
            linksByPlatform?: {
                [key: string]: components["schemas"]["PlatformLink"];
            };
            /** @description A collection of objects. Each key is a unique identifier for a streaming entity, and each value is an object that contains data for that entity. */
            entitiesByUniqueId?: {
                [key: string]: components["schemas"]["Entity"];
            };
        };
        PlatformLink: {
            /** @description The unique ID for this entity. */
            entityUniqueId?: string;
            /** @description The URL for this match. */
            url?: string;
            /** @description The native app URI that can be used on mobile devices to open this entity directly in the native app. */
            nativeAppUriMobile?: string | null;
            /** @description The native app URI that can be used on desktop devices to open this entity directly in the native app. */
            nativeAppUriDesktop?: string | null;
        };
        Entity: {
            /** @description This is the unique identifier on the streaming platform/API provider. */
            id?: string;
            /** @enum {string} */
            type?: "song" | "album";
            title?: string | null;
            artistName?: string | null;
            thumbnailUrl?: string | null;
            thumbnailWidth?: number | null;
            thumbnailHeight?: number | null;
            /** @enum {string} */
            apiProvider?: "spotify" | "itunes" | "youtube" | "google" | "pandora" | "deezer" | "tidal" | "amazon" | "soundcloud" | "napster" | "yandex" | "spinrilla" | "audius" | "audiomack" | "anghami" | "boomplay";
            platforms?: ("spotify" | "itunes" | "appleMusic" | "youtube" | "youtubeMusic" | "google" | "googleStore" | "pandora" | "deezer" | "tidal" | "amazonStore" | "amazonMusic" | "soundcloud" | "napster" | "yandex" | "spinrilla" | "audius" | "audiomack" | "anghami" | "boomplay")[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
